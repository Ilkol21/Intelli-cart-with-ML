version: '3.8'

services:
  frontend-react:
    build:
      context: ./frontend-react
    container_name: frontend-react
    ports:
      - "8080:80"
    restart: unless-stopped
    depends_on:
      - api-gateway

  admin-vue:
    build:
      context: ./admin-vue
    container_name: admin-vue
    ports:
      - "8081:80"
    restart: unless-stopped
    depends_on:
      - api-gateway

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    restart: unless-stopped
    env_file:
      - ./api-gateway/.env
    depends_on:
      user-service-web:
        condition: service_started
      list-service:
        condition: service_started
      product-catalog-service:
        condition: service_started
      delivery-service:
        condition: service_started

  user-service-web:
    image: nginx:alpine
    container_name: user-service-web
    volumes:
      - ./user-service:/var/www/html
      - ./user-service/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user-service

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    volumes:
      - ./user-service:/var/www/html
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy

  list-service:
    build:
      context: ./list-service
    container_name: list-service
    restart: unless-stopped
    env_file:
      - ./list-service/.env
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy # <-- ОНОВЛЕНО

  product-catalog-service:
    build:
      context: ./product-catalog-service
    container_name: product-catalog-service
    restart: unless-stopped
    env_file:
      - ./product-catalog-service/.env
    depends_on:
      postgres-db:
        condition: service_healthy
      kafka:
        condition: service_healthy # <-- ОНОВЛЕНО
    volumes:
        - uploads_data:/usr/src/app/uploads

  delivery-service:
    build:
      context: ./delivery-service
    container_name: delivery-service
    restart: unless-stopped
    env_file: # <-- ДОДАНО
      - ./delivery-service/.env
    depends_on:
      postgres-db:
        condition: service_healthy

  postgres-db:
    image: postgres:14-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d users_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CLUSTER_ID=9kPmCs0tQ_SounhTBlWXjg
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck: # <-- ОНОВЛЕНО
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 15

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  recommendation-service:
    build:
      context: ./recommendation-service
    container_name: recommendation-service
    restart: unless-stopped
    environment:
      KAFKA_BROKER: 'kafka:9092'
      REDIS_HOST: 'redis'
      RABBITMQ_HOST: 'rabbitmq'
    volumes:
      - ./recommendation-service:/app
    depends_on:
      kafka:
        condition: service_healthy # <-- ОНОВЛЕНО
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  redis:
    image: redis:alpine
    container_name: redis
#    ports:
#      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres-data:
  kafka_data:
  redis_data:
  uploads_data: